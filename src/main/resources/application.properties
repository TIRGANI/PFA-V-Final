# ===============================
# = DATA SOURCE
# ===============================

server.port:8090

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://spryrr1myu6oalwl.chr7pe7iynqr.eu-west-1.rds.amazonaws.com:3306/om3pvkuyw3ym9bor?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC

#delete cache
spring.resources.cache.cachecontrol.no-cache=true
spring.cache.type=NONE
spring.servlet.multipart.max-file-size=500KB
spring.servlet.multipart.max-request-size=500KB
#end delete cache

# Username and password
spring.datasource.username = r30v7dxw6zm1om1x
spring.datasource.password = d9714e4ur3s2li96
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true



# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect


spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.html


spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration



